

import ca.weblite.codename1.json.JSONArray;
import ca.weblite.codename1.json.JSONException;
import ca.weblite.codename1.json.JSONObject;
import com.codename1.bluetoothle.Bluetooth;
import com.codename1.bluetoothle.BluetoothEx;
import com.codename1.components.MultiButton;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Container;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.util.Base64;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose of building native mobile
 * applications using Java.
 */
public class BTDemoII {

    private Form current;
    private Resources theme;

    private BluetoothEx bt;
    private Form main;
    private Container devicesCnt;
    private Container messagesCnt;
    private final Map devices = new HashMap();
    private final ArrayList<String> messages = new ArrayList<>();
    private final boolean isIOS = Display.getInstance().getPlatformName().equals("ios");

    private String target = null;
    private boolean connecting = false;
    private boolean connected = false;
    private boolean disconnecting = false;
    private boolean closing = false;
    private boolean reading = false;
    private boolean writing = false;
    private final String service = "2800";
    private final String uuid = "2801";
    private final String banner = "Terminal";
    private final String sendValue = "Four score and seven years ago";

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");
        Toolbar.setGlobalToolbar(true);
        Log.bindCrashProtection(true);
        try {
            bt = new BluetoothEx();
        } catch (Exception e) {
            System.out.println("Bluetooth " + e.getMessage());
        }
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        main = new Form("BluetoothEx LE Demo II");
        main.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        Toolbar toolbar = main.getToolbar();

        toolbar.addCommandToSideMenu("Enable Bluetooth", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (!bt.isEnabled()) {
                        bt.enable();
                        addMessage("enabled", "success");
                    } else {
                        addMessage("enabled", "enabled");
                    }
                } catch (Exception e) {
                    addMessage("isEnabled-enable", e.getMessage());
                }
                try {
                    if (!bt.hasPermission()) {
                        bt.requestPermission();
                        addMessage("hasPermission", "success");
                    } else {
                        addMessage("hasPermission", "true");
                    }
                } catch (Exception e) {
                    addMessage("hasPermission", e.getMessage());
                }
                try {
                    if (!bt.isLocationEnabled()) {
                        bt.requestLocation();
                        addMessage("requestLocation", "success");
                    } else {
                        addMessage("requestLocation", "enabled");
                    }
                } catch (Exception e) {
                    addMessage("isLocationEnabled-requestLocation", e.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Initialize", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    bt.initialize(true, false, "bluetoothleplugin");
                    addMessage("initialize", "success");
                } catch (IOException ex) {
                    addMessage("initialize-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Start Scan", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {

                    addMessage("startScan", "pending");
                    if (!bt.isScanning()) {
                        addMessage("isScanning", "no");
                        bt.startScan(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    System.out.println("response " + res);
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "scanStarted":
                                            addMessage("callback", "startScan");
                                            break;
                                        case "scanStopped":
                                            addMessage("callback", "scanStopped");
                                            break;
                                        case "scanResult":
                                            /*
                                                name = the device's display name
                                                address = the device's address / identifier for connecting to the object
                                                rssi = signal strength
                                                advertisement = advertisement data in encoded string of bytes, use bluetoothle.encodedStringToBytes() (Android)
                                                advertisement = advertisement hash with the keys specified here (iOS)
                                                advertisement = empty (Windows)
                                             */
                                            if (!devices.containsKey(res.getString("address"))) {
                                                devices.put(res.getString("address"), res);
                                                updateUI();
                                            }
                                            break;
                                        default:
                                    }
                                } catch (JSONException ex) {
                                    addMessage("scan-actionPerformed-exception", ex.getMessage());
                                }
                            }
                        },
                                null, // no services specified
                                true, // allowDuplicated
                                Bluetooth.SCAN_MODE_LOW_POWER, // ScanMode
                                Bluetooth.MATCH_MODE_STICKY, // MatchMode
                                Bluetooth.MATCH_NUM_MAX_ADVERTISEMENT, // MaxNumber
                                Bluetooth.CALLBACK_TYPE_ALL_MATCHES); // Callback Type
                    } else {
                        addMessage("startScan", "already scanning");
                    }
                } catch (IOException ex) {
                    addMessage("scan-exception", ex.getMessage());
                }

            }
        });

        toolbar.addCommandToSideMenu("Stop Scan", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (bt.isScanning()) {
                        addMessage("isScanning", "yes");
                        bt.stopScan();
                        addMessage("stopScan", "success");
                    }
                } catch (IOException ex) {
                    addMessage("stop scan-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Services", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("services", "no target");
                    } else {
                        addMessage("services", "from " + target);
                        bt.services(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "services":
                                            addMessage("services", "found");
                                            addMessage("services", res.getString("name"));
                                            addMessage("services", res.getString("address"));
                                            JSONArray array = res.getJSONArray("services");
                                            if (array != null) {
                                                for (int i = 0; i < array.length(); i++) {
                                                    JSONObject current = array.getJSONObject(i);
                                                    addMessage("* service: ", current.toString());
                                                }
                                            }
                                            break;
                                        default:
                                            addMessage("services", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("subscribe", e.getMessage());
                                }
                            }
                        }, target, null);
                    }
                    addMessage("services", "pending");
                } catch (IOException ex) {
                    addMessage("services-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Subscribe", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("subscribe", "no target");
                    } else if (connected && !reading) {
                        addMessage("subscribe", "from " + target);
                        bt.subscribe(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "subscribed":
                                            addMessage("subscribe", "subscribing");
                                            break;
                                        case "subscribedResult":
                                            reading = false;
                                            addMessage("subscribe", "subscribed");
                                            String name = res.getString("name");
                                            if (name != null) {
                                                addMessage(" * name ", name);
                                            }
                                            String value = res.getString("value");
                                            if (value != null) {
                                                addMessage(" * value ", value);
                                            }
                                            break;
                                        default:
                                            addMessage("subscribe", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("subscribe", e.getMessage());
                                }
                            }
                        }, target, service, uuid);
                    }
                    reading = true;
                    addMessage("subscribe", "pending");
                } catch (IOException ex) {
                    addMessage("subscribe-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Unsubscribe", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("unsubscribe", "no target");
                    } else if (connected && !reading) {
                        addMessage("unsubscribe", "from " + target);
                        bt.unsubscribe(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "unsubscribe":
                                            reading = false;
                                            addMessage("unsubscribe", "unsubscribe");
                                            break;
                                        default:
                                            addMessage("unsubscribe", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("unsubscribe", e.getMessage());
                                }
                            }
                        }, target, service, uuid);
                    }
                    reading = true;
                    addMessage("unsubscribe", "pending");
                } catch (IOException ex) {
                    addMessage("unsubscribe-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Characteristics", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("characteristics", "no target");
                    } else {
                        addMessage("characteristics", "from " + target);
                        bt.characteristics(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "characteristics":
                                            addMessage("characteristics", "service:  " + res.getString("uuid"));
                                            addMessage("characteristics", " address: " + res.getString("address"));
                                            addMessage("characteristics", "    name: " + res.getString("name"));
                                            /*
                                            JSONArray array = res.getJSONArray("characteristics");
                                            if (array != null) {
                                                for (int i = 0; i < array.length(); i++) {
                                                    JSONObject current = array.getJSONObject(i);
                                                    addMessage("characteristic", "    uuid: " + current.getString("uuid"));
                                                }
                                            }
                                            */
                                            break;
                                        default:
                                            addMessage("characteristics", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("characteristics", e.getMessage());
                                }
                            }
                        }, target, service, null);
                    }
                    addMessage("characteristics", "pending");
                } catch (IOException ex) {
                    addMessage("characteristics-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Connect", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("connect", "no target");
                    } else if ((!connecting || !connected) && !disconnecting) {
                        addMessage("connect", "to " + target);
                        bt.connect(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "connected":
                                            connecting = false;
                                            connected = true;
                                            addMessage("connect", "connected");
                                            break;
                                        case "disconnected":
                                            connecting = false;
                                            addMessage("connect", "disconnected");
                                            break;
                                        default:
                                            addMessage("connect", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("connect", e.getMessage());
                                }
                            }
                        }, target);
                        connecting = true;
                        addMessage("connect", "pending");
                    }
                } catch (IOException ex) {
                    connecting = false;
                    addMessage("connect-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Read", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("read", "no target");
                    } else if (connected && !reading) {
                        addMessage("read", "from " + target);
                        bt.read(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "read":
                                            reading = false;
                                            addMessage("read", res.getString("value"));
                                            break;
                                        default:
                                            addMessage("read", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("read", e.getMessage());
                                }
                            }
                        }, target, service, uuid);
                    }
                    reading = true;
                    addMessage("read", "pending");
                } catch (IOException ex) {
                    addMessage("read-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Write", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("write", "no target");
                    } else if (connected && !writing) {
                        addMessage("write", "from " + target);
                        bt.write(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "write":
                                            writing = false;
                                            addMessage("write", res.getString("value"));
                                            break;
                                        default:
                                            addMessage("write", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("write", e.getMessage());
                                }
                            }
                        }, target, service, uuid, sendValue, false);
                    }
                    writing = true;
                    addMessage("write", "pending");
                } catch (IOException ex) {
                    addMessage("write-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Reconnect", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("reconnect", "no target");
                    } else if ((!connecting || !connected) && !disconnecting) {
                        addMessage("reconnect", "to " + target);
                        bt.reconnect(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "connected":
                                            connecting = false;
                                            connected = true;
                                            addMessage("reconnect", "connected");
                                            break;
                                        case "disconnected":
                                            connecting = false;
                                            addMessage("reconnect", "disconnected");
                                            break;
                                        default:
                                            addMessage("reconnect", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("reconnect", e.getMessage());
                                }
                            }
                        }, target);
                        connecting = true;
                        addMessage("reconnect", "pending");
                    }
                } catch (IOException ex) {
                    connecting = false;
                    addMessage("reconnect-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Disconnect", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("disconnect", "no target");
                    } else if (!disconnecting && (connected && !connecting)) {
                        addMessage("disconnect", "from " + target);
                        bt.disconnect(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "disconnected":
                                            connected = false;
                                            disconnecting = false;
                                            addMessage("disconnect", "disconnected");
                                            break;
                                        default:
                                            addMessage("disconnect", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("disconnect", e.getMessage());
                                }
                            }
                        }, target);
                    }
                    disconnecting = true;
                    addMessage("disconnect", "pending");
                } catch (IOException ex) {
                    disconnecting = false;
                    addMessage("disconnect-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Close", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (target == null) {
                        addMessage("close", "no target");
                    } else if (!closing && !connected && !connecting && !disconnecting) {
                        addMessage("close", "from " + target);
                        bt.close(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent evt) {
                                try {
                                    JSONObject res = (JSONObject) evt.getSource();
                                    String status = res.getString("status");
                                    switch (status) {
                                        case "closed":
                                            closing = false;
                                            addMessage("close", "closed");
                                            break;
                                        default:
                                            addMessage("close", status);
                                    }
                                } catch (JSONException e) {
                                    addMessage("close", e.getMessage());
                                }
                            }
                        }, target);
                    }
                    closing = true;
                    addMessage("close", "pending");
                } catch (IOException ex) {
                    closing = false;
                    addMessage("close-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Init Peripheral", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {

                try {
                    bt.initializePeripheral(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            try {
                                JSONObject res = (JSONObject) evt.getSource();
                                String status = res.getString("status");
                                switch (status) {
                                    case "enabled":
                                        addMessage("peripheral", "Bluetooth is enabled");
                                        break;
                                    case "disabled":
                                        addMessage("peripheral", "Bluetooth is disabled");
                                        break;
                                    case "readRequested":
                                        addMessage("peripheral", "Respond to a read request with respond()");
                                        break;
                                    case "writeRequested":
                                        addMessage("peripheral", "Respond to a write request with respond()");
                                        break;
                                    case "subscribed":
                                        addMessage("peripheral", "Subscription started request, use notify() to send new data");
                                        break;
                                    case "unsubscribed":
                                        addMessage("peripheral", "Subscription ended request, stop sending data");
                                        break;
                                    case "notificationReady":
                                        addMessage("peripheral", "Resume sending subscription updates (iOS)");
                                        break;
                                    case "notificationSent":
                                        addMessage("peripheral", "Notification has been sent (Android)");
                                        break;
                                    case "connected":
                                        addMessage("peripheral", res.getString("address") + " has connected");
                                        break;
                                    case "disconnected":
                                        addMessage("peripheral", res.getString("address") + " has disconnected");
                                        break;
                                    case "mtuChanged":
                                        addMessage("peripheral", "MTU has changed for device");
                                        break;
                                    default:
                                        addMessage("peripheral", "Unknown message response");
                                }
                            } catch (JSONException ex) {
                                addMessage("peripheral", ex.getMessage());
                            }

                        }
                    }, true, "bluetoothlepluginclient");
                    addMessage("initialize peripheral", bt.getLastError());
                } catch (IOException ex) {
                    addMessage("initPeripheral-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Add Service", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    ArrayList<JSONObject> characteristics = new ArrayList<>();
                    {
                        HashMap permissions = new HashMap();
                        permissions.put("read", true);
                        permissions.put("write", true);
                        HashMap properties = new HashMap();
                        properties.put("read", true);
                        properties.put("writeWithoutResponse", true);
                        properties.put("write", true);
                        properties.put("notify", true);
                        properties.put("indicate", true);
                        JSONObject characteristic = bt.createCharacteristic(uuid, permissions, properties);
                        characteristics.add(characteristic);
                    }
                    final JSONObject xService = bt.createService(service, characteristics);
                    addMessage("service", xService.toString());
                    bt.addService(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            try {
                                JSONObject res = (JSONObject) evt.getSource();
                                String status = res.getString("status");
                                switch (status) {
                                    case "serviceAdded":
                                        addMessage("service", "added " + res.getString("service"));
                                        break;
                                    default:
                                        addMessage("service", "add failed");
                                }

                            } catch (Exception e) {
                                addMessage("addService-Exception", e.getMessage());
                            }
                        }
                    }, xService);
                } catch (IOException ex) {
                    addMessage("addService-IOException", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Remove Service", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    bt.removeService(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            try {
                                JSONObject res = (JSONObject) evt.getSource();
                                String status = res.getString("status");
                                switch (status) {
                                    case "serviceRemoved":
                                        addMessage("service", "removed " + res.getString("service"));
                                        break;
                                    default:
                                        addMessage("service", "remove failed");
                                }

                            } catch (Exception e) {

                            }
                        }
                    }, service);
                } catch (IOException ex) {
                    addMessage("removeService-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Remove All Services", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    bt.removeAllServices();
                    addMessage("removeAllServices", bt.getLastError());
                } catch (IOException ex) {
                    addMessage("removeAllServices-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Start Advertising", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    bt.startAdvertising(service, banner);
                    addMessage("startAdvertising", bt.getLastError());
                } catch (IOException ex) {
                    addMessage("startAdvertising-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("isAdvertising", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (bt.isAdvertising()) {
                        addMessage("isAdvertising", "yes");
                    } else {
                        addMessage("isAdvertising", "no");
                    }
                    //addMessage("isAdvertising", bt.getLastError());
                } catch (IOException ex) {
                    addMessage("isAdvertising-exception", ex.getMessage());
                }
            }
        });

        toolbar.addCommandToSideMenu("Stop Advertising", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (bt.isAdvertising()) {
                        addMessage("isAdvertising", "yes");
                        bt.stopAdvertising();
                        addMessage("stopAdvertising", bt.getLastError());
                    } else {
                        addMessage("isAdvertising", "no");
                    }
                    //addMessage("isAdvertising-stopAdvertising", bt.getLastError());
                } catch (IOException ex) {
                    addMessage("isAdvertisin-stopAdvertisingg-exception", ex.getMessage());
                }
            }
        });

        devicesCnt = new Container(new BoxLayout(BoxLayout.Y_AXIS));
        main.add(devicesCnt);
        messagesCnt = new Container(new BoxLayout(BoxLayout.Y_AXIS));
        main.add(messagesCnt);
        main.show();

    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

    private void updateUI() throws JSONException {
        try {
            devicesCnt.removeAll();
            Set keys = devices.keySet();
            for (Iterator iterator = keys.iterator(); iterator.hasNext();) {
                final String address = (String) iterator.next();
                JSONObject obj = (JSONObject) devices.get(address);
                final String objName = obj.getString("name");
                MultiButton mb = new MultiButton(objName);
                mb.setTextLine2(address);
                if (obj.has("advertisement")) {
                    mb.setTextLine3("has advertisement");
                    try {
                        String advertisement = obj.getString("advertisement");
                        advertisement = new String(Base64.decode(advertisement.getBytes()));
                        mb.setTextLine3(advertisement);
                    } catch (Exception e) {
                        addMessage(objName, "advertisement exception: " + e.getMessage());
                    }
                }
                mb.setTextLine4(String.valueOf(obj.getInt("rssi")));
                mb.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent evt) {
                        addMessage(objName, "pressed");
                        target = address;
                    }
                });
                devicesCnt.add(mb);
            }
            devicesCnt.revalidate();
            messagesCnt.removeAll();
            for (String current : messages) {
                messagesCnt.add(new Label(current));
            }
        } catch (Exception e) {
            addMessage("UpdateUI", e.getMessage());
        }
        messagesCnt.revalidate();
    }

    private void addMessage(String caller, String text) {
        try {
            messages.add(caller + ": " + text);
            updateUI();
        } catch (Exception e) {
        }
    }

}
